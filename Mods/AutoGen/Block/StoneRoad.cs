// Copyright (c) Strange Loop Games. All rights reserved.
// See LICENSE file in the project root for full license information.
// <auto-generated />

namespace Eco.Mods.TechTree
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using Eco.Gameplay.Blocks;
    using Eco.Gameplay.Components;
    using Eco.Gameplay.DynamicValues;
    using Eco.Gameplay.Items;
    using Eco.Gameplay.Objects;
    using Eco.Gameplay.Players;
    using Eco.Gameplay.Skills;
    using Eco.Gameplay.Systems;
    using Eco.Gameplay.Systems.TextLinks;
    using Eco.Core.Items;
    using Eco.Shared.Localization;
    using Eco.Shared.Serialization;
    using Eco.Shared.Utils;
    using Eco.World;
    using Eco.World.Blocks;
    using Eco.Gameplay.Pipes;

    [RequiresSkill(typeof(BasicEngineeringSkill), 1)]
    public partial class StoneRoadRecipe :
        RecipeFamily
    {
        public StoneRoadRecipe()
        {
            this.Initialize(Localizer.DoStr("Stone Road"), typeof(StoneRoadRecipe));
            this.Recipes = new List<Recipe>
            {
                new Recipe(
                    "StoneRoad",
                    Localizer.DoStr("Stone Road"),
                    new IngredientElement[]
                    {
                    new IngredientElement(typeof(MortarItem), 3, typeof(BasicEngineeringSkill), typeof(BasicEngineeringLavishResourcesTalent)),
                    new IngredientElement("CrushedRock", 2, typeof(BasicEngineeringSkill), typeof(BasicEngineeringLavishResourcesTalent)),
                    },
                    new CraftingElement[]
                    {
                    new CraftingElement<StoneRoadItem>(),
                    }
                )
            };
            this.LaborInCalories = CreateLaborInCaloriesValue(100, typeof(BasicEngineeringSkill), typeof(StoneRoadRecipe), this.UILink());
            this.ExperienceOnCraft = 1;
            this.CraftMinutes = CreateCraftTimeValue(typeof(StoneRoadRecipe), this.UILink(), 0.5f, typeof(BasicEngineeringSkill), typeof(BasicEngineeringFocusedSpeedTalent), typeof(BasicEngineeringParallelSpeedTalent));
            this.Initialize(Localizer.DoStr("Stone Road"), typeof(StoneRoadRecipe));

            CraftingComponent.AddRecipe(typeof(WainwrightTableObject), this);

        }
    }

    [Serialized]
    [Solid, Constructed,Wall]
    [Road(1.2f)]
    [UsesRamp(typeof(StoneRampItem))]
    [RequiresSkill(typeof(BasicEngineeringSkill), 1)]
    public partial class StoneRoadBlock :
        Block
        , IRepresentsItem
    {
        public Type RepresentedItemType { get { return typeof(StoneRoadItem); } }
    }

    [Serialized]
    [LocDisplayName("Stone Road")]
    [MaxStackSize(20)]
    [Weight(30000)]
    [MakesRoads]
    [Ecopedia("Blocks", "Roads", createAsSubPage: true, display: InPageTooltip.DynamicTooltip)]
    [Tag("Road", 1)]
    [Tag("Constructable", 1)]
    public partial class StoneRoadItem :
    RoadItem<StoneRoadBlock>
    {
        public override LocString DisplayDescription { get { return Localizer.DoStr("A rocky surface formed from smoothed rubble. It's fairly durable and efficient for any wheeled vehicle."); } }

    }

}
