// Copyright (c) Strange Loop Games. All rights reserved.
// See LICENSE file in the project root for full license information.
// <auto-generated />

namespace Eco.Mods.TechTree
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using Eco.Gameplay.Blocks;
    using Eco.Gameplay.Components;
    using Eco.Gameplay.DynamicValues;
    using Eco.Gameplay.Items;
    using Eco.Gameplay.Objects;
    using Eco.Gameplay.Players;
    using Eco.Gameplay.Skills;
    using Eco.Gameplay.Systems;
    using Eco.Gameplay.Systems.TextLinks;
    using Eco.Core.Items;
    using Eco.Shared.Localization;
    using Eco.Shared.Serialization;
    using Eco.Shared.Utils;
    using Eco.World;
    using Eco.World.Blocks;
    using Eco.Gameplay.Pipes;

    [RequiresSkill(typeof(AdvancedMasonrySkill), 1)]
    public partial class AshlarBasaltRecipe :
        RecipeFamily
    {
        public AshlarBasaltRecipe()
        {
            this.Initialize(Localizer.DoStr("Ashlar Basalt"), typeof(AshlarBasaltRecipe));
            this.Recipes = new List<Recipe>
            {
                new Recipe(
                    "AshlarBasalt",
                    Localizer.DoStr("Ashlar Basalt"),
                    new IngredientElement[]
                    {
                    new IngredientElement(typeof(BasaltItem), 20, typeof(AdvancedMasonrySkill), typeof(AdvancedMasonryLavishResourcesTalent)),
                    new IngredientElement(typeof(MortarItem), 6, typeof(AdvancedMasonrySkill), typeof(AdvancedMasonryLavishResourcesTalent)),
                    new IngredientElement(typeof(SteelBarItem), 1, typeof(AdvancedMasonrySkill), typeof(AdvancedMasonryLavishResourcesTalent)),
                    },
                    new CraftingElement[]
                    {
                    new CraftingElement<AshlarBasaltItem>(),
                   new CraftingElement<CrushedBasaltItem>(typeof(AdvancedMasonrySkill), 2)

                    }
                )
            };
            this.LaborInCalories = CreateLaborInCaloriesValue(300, typeof(AdvancedMasonrySkill), typeof(AshlarBasaltRecipe), this.UILink());
            this.ExperienceOnCraft = 1.5f;
            this.CraftMinutes = CreateCraftTimeValue(typeof(AshlarBasaltRecipe), this.UILink(), 2, typeof(AdvancedMasonrySkill), typeof(AdvancedMasonryFocusedSpeedTalent), typeof(AdvancedMasonryParallelSpeedTalent));
            this.Initialize(Localizer.DoStr("Ashlar Basalt"), typeof(AshlarBasaltRecipe));

            CraftingComponent.AddRecipe(typeof(AdvancedMasonryTableObject), this);

        }
    }

    [Serialized]
    [Solid, Wall, Constructed,BuildRoomMaterialOption]
    [BlockTier(4)]
    [RequiresSkill(typeof(AdvancedMasonrySkill), 1)]
    public partial class AshlarBasaltBlock :
        Block
        , IRepresentsItem
    {
        public Type RepresentedItemType { get { return typeof(AshlarBasaltItem); } }
    }

    [Serialized]
    [LocDisplayName("Ashlar Basalt")]
    [MaxStackSize(40)]
    [Weight(30000)]
    [Ecopedia("Blocks", "Building Materials", createAsSubPage: true, display: InPageTooltip.DynamicTooltip)]
    [Currency]
    [Tag("AshlarStone", 1)]
    [Tag("Constructable", 1)]
    [Tier(4)]
    public partial class AshlarBasaltItem :
    BlockItem<AshlarBasaltBlock>
    {
        public override LocString DisplayNamePlural { get { return Localizer.DoStr("Ashlar Basalt"); } }
        public override LocString DisplayDescription { get { return Localizer.DoStr("Ashlar is finely cut stone made by an expert mason. Ashlar stone is an especially decorative building material that comes in a variety of styles based on the type of rock used."); } }

        public override bool CanStickToWalls { get { return false; } }

        private static Type[] blockTypes = new Type[] {
        typeof(AshlarBasaltStacked1Block),
        typeof(AshlarBasaltStacked2Block),
        typeof(AshlarBasaltStacked3Block),
            typeof(AshlarBasaltStacked4Block)
        };
        public override Type[] BlockTypes { get { return blockTypes; } }
    }

    [Serialized, Solid] public class AshlarBasaltStacked1Block : PickupableBlock { }
    [Serialized, Solid] public class AshlarBasaltStacked2Block : PickupableBlock { }
    [Serialized, Solid] public class AshlarBasaltStacked3Block : PickupableBlock { }
    [Serialized, Solid,Wall] public class AshlarBasaltStacked4Block : PickupableBlock { } //Only a wall if it's all 4 AshlarBasalt
}
