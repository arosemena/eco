// Copyright (c) Strange Loop Games. All rights reserved.
// See LICENSE file in the project root for full license information.
// <auto-generated />

namespace Eco.Mods.TechTree
{
        using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using Eco.Gameplay.Blocks;
    using Eco.Gameplay.Components;
    using Eco.Gameplay.DynamicValues;
    using Eco.Gameplay.Items;
    using Eco.Gameplay.Objects;
    using Eco.Gameplay.Players;
    using Eco.Gameplay.Skills;
    using Eco.Gameplay.Systems;
    using Eco.Gameplay.Systems.TextLinks;
    using Eco.Shared.Localization;
    using Eco.Shared.Serialization;
    using Eco.Shared.Utils;
    using Eco.Core.Items;
    using Eco.World;
    using Eco.World.Blocks;
    using Eco.Gameplay.Pipes;

    [RequiresSkill(typeof(ElectronicsSkill), 1)]      
    public partial class ElectricMotorRecipe :
        RecipeFamily
    {
        public ElectricMotorRecipe()
        {
            this.Initialize(Localizer.DoStr("Electric Motor"), typeof(ElectricMotorRecipe));
            this.Recipes = new List<Recipe>
            {
                new Recipe(
                    "ElectricMotor",
                    Localizer.DoStr("Electric Motor"),
                    new IngredientElement[]
                    {
                    new IngredientElement(typeof(BasicCircuitItem), 4, typeof(ElectronicsSkill), typeof(ElectronicsLavishResourcesTalent)), 
                    new IngredientElement(typeof(CopperWiringItem), 10, typeof(ElectronicsSkill), typeof(ElectronicsLavishResourcesTalent)), 
                    new IngredientElement(typeof(SteelBarItem), 8, typeof(ElectronicsSkill), typeof(ElectronicsLavishResourcesTalent)),    
                    },
                    new CraftingElement[]
                    {
                    new CraftingElement<ElectricMotorItem>(), 
                    }
                )
            };


            this.ExperienceOnCraft = 10;  

            this.LaborInCalories = CreateLaborInCaloriesValue(600, typeof(ElectronicsSkill), typeof(ElectricMotorRecipe), this.UILink()); 
            this.CraftMinutes = CreateCraftTimeValue(typeof(ElectricMotorRecipe), this.UILink(), 2, typeof(ElectronicsSkill), typeof(ElectronicsFocusedSpeedTalent), typeof(ElectronicsParallelSpeedTalent));     
            this.Initialize(Localizer.DoStr("Electric Motor"), typeof(ElectricMotorRecipe));

            CraftingComponent.AddRecipe(typeof(ElectronicsAssemblyObject), this);
        }
    }

    [Serialized]
    [LocDisplayName("Electric Motor")]
    [Weight(1000)]      
    [Currency] 
    [Ecopedia("Items", "Products", createAsSubPage: true, display: InPageTooltip.DynamicTooltip)]                                                                           
    public partial class ElectricMotorItem :
    Item                                    
    {
        public override LocString DisplayDescription { get { return Localizer.DoStr("A motor."); } }
    }
}
